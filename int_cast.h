//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#pragma once

#include <limits>
#include <type_traits>

#ifdef INT_CAST_NO_EXCEPTIONS
#include <stdio.h>
#include <stdlib.h>
#else
#include <stdexcept>
#endif

#ifndef INT_CAST_EXIT_CODE
#define INT_CAST_EXIT_CODE 75
#endif

///
/// These functions will allow you to use int for your APIs and provides a safe
/// and convenient way to convert to and from size_t and other specialized
/// integer types.
///

inline void int_cast_assert_with_message(bool condition, char const * message)
{
    if (condition)
        return;

#ifdef INT_CAST_NO_EXCEPTIONS
    fprintf(stderr, "%s", message);
    exit(INT_CAST_EXIT_CODE);
#else
    throw std::runtime_error(message);
#endif
}

///
/// This cast is used to cast any signed integer to any unsigned integer type.
/// It will automatically throw an error if the value cannot be cast without
/// losing information.
///
template <typename D,
          typename S,
          typename std::enable_if<std::is_unsigned<D>::value, int>::type = 0,
          typename std::enable_if<std::is_signed<S>::value, int>::type = 0>
inline D int_cast(S value)
{
    using namespace std;

    static_assert(is_integral<S>::value, "int_cast: Source type is not an integer");
    static_assert(is_integral<D>::value, "int_cast: Destination type is not an integer");

    int_cast_assert_with_message(
        value >= 0,
        "int_cast: Attempt to cast a negative value to an unsigned integral.");

    int_cast_assert_with_message(
        static_cast<typename make_unsigned<S>::type>(value) <= numeric_limits<D>::max(),
        "int_cast: Value too large for cast operation.");

    return static_cast<D>(value);
}

///
/// This cast is used to cast any unsigned integer to any signed integer type.
/// It will automatically throw an error if the value cannot be cast without
/// losing information.
///
template <typename D,
          typename S,
          typename std::enable_if<std::is_signed<D>::value, int>::type = 0,
          typename std::enable_if<std::is_unsigned<S>::value, int>::type = 0>
inline D int_cast(S value)
{
    using namespace std;

    static_assert(is_integral<S>::value, "int_cast: Source type is not an integer");
    static_assert(is_integral<D>::value, "int_cast: Destination type is not an integer");

    int_cast_assert_with_message(
        value <= numeric_limits<D>::max(),
        "int_cast: Value too large for cast operation.");

    return static_cast<D>(value);
}

///
/// This cast is used to cast any unsigned integer to any unsigned integer type.
/// It will automatically throw an error if the value cannot be cast without
/// losing information.
///
template <typename D,
          typename S,
          typename std::enable_if<std::is_unsigned<D>::value, int>::type = 0,
          typename std::enable_if<std::is_unsigned<S>::value, int>::type = 0>
inline D int_cast(S value)
{
    using namespace std;

    static_assert(is_integral<S>::value, "int_cast: Source type is not an integer");
    static_assert(is_integral<D>::value, "int_cast: Destination type is not an integer");

    int_cast_assert_with_message(
        value <= numeric_limits<D>::max(),
        "int_cast: Value too large for cast operation.");

    return static_cast<D>(value);
}

///
/// This cast is used to cast any signed integer to any signed integer type.
/// It will automatically throw an error if the value cannot be cast without
/// losing information.
///
template <typename D,
          typename S,
          typename std::enable_if<std::is_signed<D>::value, int>::type = 0,
          typename std::enable_if<std::is_signed<S>::value, int>::type = 0>
inline D int_cast(S value)
{
    using namespace std;

    static_assert(is_integral<S>::value, "int_cast: Source type is not an integer");
    static_assert(is_integral<D>::value, "int_cast: Destination type is not an integer");

    int_cast_assert_with_message(
        value >= numeric_limits<D>::min(),
        "int_cast: Value too large for cast operation.");

    int_cast_assert_with_message(
        value <= numeric_limits<D>::max(),
        "int_cast: Value too large for cast operation.");

    return static_cast<D>(value);
}
